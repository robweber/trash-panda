# this is a simple configuration file where all service, type, and host definitions are in one file.
# These can be separated out as shown in the documentation https://github.com/robweber/trash-panda/blob/main/README.md
config:
  # this is optional and will default to 3 if missing
  default_interval: 3
  web:
    landing_page_text: "This is an example configuration using fake hosts and fake service checks to demonstrate various components of the Trash Panda environment."
    top_nav:
      links:
        - name: Wiki
          url: /docs/wiki
# dummy checks are used in this config but the real checks can be swapped out as the command type
services:
  dummy_check:
    command: "python3 {{ path(SCRIPTS_PATH, 'dummy_check.py') }}"
    args:
      - "-m"
      - "{{ service.message }}"
      - "-r"
      - "{{ default(service.return_code, 0) }}"
  http:
    command: "{{ path(NAGIOS_PATH, 'check_http') }}"
    args:
      - "-H"
      - "{{ service.hostname }}"
      - "-p"
      - "{{ default(service.port, 80) }}"
      - "-u"
      - "{{ default(service.path, '/') }}"
  https:
    command: "{{ path(NAGIOS_PATH, 'check_http') }}"
    args:
      - "-H"
      - "{{ service.hostname }}"
      - "-p"
      - "{{ default(service.port, 443) }}"
      - "-u"
      - "{{ default(service.path, '/') }}"
      - "-S"
  esxi_datastores:
    command: "python3 {{ path(SCRIPTS_PATH, 'check_esxi.py')}}"
    args:
      - "-H"
      - "{{ host.address }}"
      - "-p"
      - "{{ default(host.port, 443) }}"
      - "-U"
      - "{{ host.username }}"
      - "-P"
      - "{{ host.password }}"
      - "-c"
      - "{{ service.critical }}"
      - "-w"
      - "{{ service.warning }}"
      - "-t"
      - "datastore"
  esxi_host_status:
    command: "python3 {{ path(SCRIPTS_PATH, 'check_esxi.py')}}"
    args:
      - "-H"
      - "{{ host.address }}"
      - "-p"
      - "{{ default(host.port, 443) }}"
      - "-U"
      - "{{ host.username }}"
      - "-P"
      - "{{ host.password }}"
      - "-t"
      - "status"
  esxi_vm_status:
    command: "python3 {{ path(SCRIPTS_PATH, 'check_esxi.py')}}"
    args:
      - "-H"
      - "{{ host.address }}"
      - "-p"
      - "{{ default(host.port, 443) }}"
      - "-U"
      - "{{ host.username }}"
      - "-P"
      - "{{ host.password }}"
      - "-t"
      - "vms"
  switch_uptime:
    command: "python3 {{ path(SCRIPTS_PATH, 'check_snmp.py') }}"
    args:
      - "-H"
      - "{{ host.address }}"
      - "-c"
      - "{{ host.community }}"
      - "-o"
      - "1.3.6.1.2.1.1.3.0"
types:
  firewall:
    name: Firewall
    icon: server-security
    # remove this to use ICMP checks
    ping_command:
      type: dummy_check
      args:
        message: "Alive"
        return_code: 0
  server:
    name: Server
    icon: server
    # these will be inherited by individual hosts
    services:
      - type: dummy_check
        name: "SSH"
        args:
          message: SSH Port Not Open
          return_code: 2
      - type: dummy_check
        name: "Linux Updates"
        # utilize the output filter to parse the returned json
        output_filter: "There are {{ value.security }} security and {{ value.non_security }} non-security updates pending"
        args:
          message: >-
            {"security": 0, "non_security": 33 }
          return_code: 1
  switch:
    name: Switch
    icon: router-network
    info: "This config is currently using fake check values, to use properly convert the service checks to proper SNMP checks."
    # remove this to use ICMP checks
    ping_command:
      type: dummy_check
      args:
        message: "Alive"
        return_code: 0
    config:
      community:
        required: True
        default: "public"
    services:
      - type: dummy_check
        name: "Switch Uptime"
        args:
          message: "50 days, 7:13:05"
          return_code: 0
hosts:
  - type: firewall
    name: "Firewall 1"
    address: 192.168.0.1
  - type: switch
    name: "Switch 1"
    address: 192.168.0.2
    config:
      community: "public"
  - type: server
    name: "Web Server"
    address: 192.168.0.10
    management_page: "http://192.168.0.10/"
    ping_command:
      type: dummy_check
      args:
        message: "Alive"
        return_code: 0
    # will inherit services plus add these
    services:
      - type: dummy_check
        name: HTTP
        args:
          message: "HTTP OK: HTTP/1.1 200 OK - 732014 bytes in 0.156 second response time"
          return_code: 0
